{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface CallKitVoipPlugin {\n  register(): Promise<void>;\n\n  addListener(\n      eventName: 'registration',\n      listenerFunc: (token:CallToken)   => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n      eventName: 'callAnswered',\n      listenerFunc: (callData: CallData)  => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n      eventName: 'callStarted',\n      listenerFunc: (callData: CallData) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n      eventName: 'callEnded',\n      listenerFunc: (callData: CallData) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n}\n\n\n\n\nexport type CallType = 'video' | 'audio';\n\nexport interface CallToken {\n  /**\n   * VOIP Token\n   */\n  value: string;\n}\n\nexport interface CallData {\n  /**\n   * Call ID\n   */\n  id:string;\n  /**\n   * Call Type\n   */\n  media?: CallType;\n  /**\n   * Call Display name\n   */\n  name?:string;\n  /**\n   * Call duration\n   */\n  duration?:string;\n}"]}